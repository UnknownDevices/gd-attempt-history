// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ATTEMPTHISTORY_GD_ATT_HISTORY_FBS_H_
#define FLATBUFFERS_GENERATED_ATTEMPTHISTORY_GD_ATT_HISTORY_FBS_H_

#include "flatbuffers/flatbuffers.h"

namespace gd_att_history {
namespace fbs {

struct Attempt;
struct AttemptBuilder;

struct AttemptHistory;
struct AttemptHistoryBuilder;

struct Attempt FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AttemptBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_START_TIME = 4,
    VT_START_PERC = 6,
    VT_END_PER = 8,
    VT_FLAGS = 10
  };
  uint64_t start_time() const {
    return GetField<uint64_t>(VT_START_TIME, 0);
  }
  float start_perc() const {
    return GetField<float>(VT_START_PERC, 0.0f);
  }
  float end_per() const {
    return GetField<float>(VT_END_PER, 0.0f);
  }
  uint8_t flags() const {
    return GetField<uint8_t>(VT_FLAGS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_START_TIME, 8) &&
           VerifyField<float>(verifier, VT_START_PERC, 4) &&
           VerifyField<float>(verifier, VT_END_PER, 4) &&
           VerifyField<uint8_t>(verifier, VT_FLAGS, 1) &&
           verifier.EndTable();
  }
};

struct AttemptBuilder {
  typedef Attempt Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_start_time(uint64_t start_time) {
    fbb_.AddElement<uint64_t>(Attempt::VT_START_TIME, start_time, 0);
  }
  void add_start_perc(float start_perc) {
    fbb_.AddElement<float>(Attempt::VT_START_PERC, start_perc, 0.0f);
  }
  void add_end_per(float end_per) {
    fbb_.AddElement<float>(Attempt::VT_END_PER, end_per, 0.0f);
  }
  void add_flags(uint8_t flags) {
    fbb_.AddElement<uint8_t>(Attempt::VT_FLAGS, flags, 0);
  }
  explicit AttemptBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Attempt> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Attempt>(end);
    return o;
  }
};

inline flatbuffers::Offset<Attempt> CreateAttempt(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t start_time = 0,
    float start_perc = 0.0f,
    float end_per = 0.0f,
    uint8_t flags = 0) {
  AttemptBuilder builder_(_fbb);
  builder_.add_start_time(start_time);
  builder_.add_end_per(end_per);
  builder_.add_start_perc(start_perc);
  builder_.add_flags(flags);
  return builder_.Finish();
}

struct AttemptHistory FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AttemptHistoryBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ATTS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<gd_att_history::fbs::Attempt>> *atts() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<gd_att_history::fbs::Attempt>> *>(VT_ATTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ATTS) &&
           verifier.VerifyVector(atts()) &&
           verifier.VerifyVectorOfTables(atts()) &&
           verifier.EndTable();
  }
};

struct AttemptHistoryBuilder {
  typedef AttemptHistory Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_atts(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<gd_att_history::fbs::Attempt>>> atts) {
    fbb_.AddOffset(AttemptHistory::VT_ATTS, atts);
  }
  explicit AttemptHistoryBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<AttemptHistory> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AttemptHistory>(end);
    return o;
  }
};

inline flatbuffers::Offset<AttemptHistory> CreateAttemptHistory(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<gd_att_history::fbs::Attempt>>> atts = 0) {
  AttemptHistoryBuilder builder_(_fbb);
  builder_.add_atts(atts);
  return builder_.Finish();
}

inline flatbuffers::Offset<AttemptHistory> CreateAttemptHistoryDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<gd_att_history::fbs::Attempt>> *atts = nullptr) {
  auto atts__ = atts ? _fbb.CreateVector<flatbuffers::Offset<gd_att_history::fbs::Attempt>>(*atts) : 0;
  return gd_att_history::fbs::CreateAttemptHistory(
      _fbb,
      atts__);
}

inline const gd_att_history::fbs::AttemptHistory *GetAttemptHistory(const void *buf) {
  return flatbuffers::GetRoot<gd_att_history::fbs::AttemptHistory>(buf);
}

inline const gd_att_history::fbs::AttemptHistory *GetSizePrefixedAttemptHistory(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<gd_att_history::fbs::AttemptHistory>(buf);
}

inline bool VerifyAttemptHistoryBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<gd_att_history::fbs::AttemptHistory>(nullptr);
}

inline bool VerifySizePrefixedAttemptHistoryBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<gd_att_history::fbs::AttemptHistory>(nullptr);
}

inline void FinishAttemptHistoryBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<gd_att_history::fbs::AttemptHistory> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedAttemptHistoryBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<gd_att_history::fbs::AttemptHistory> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace fbs
}  // namespace gd_att_history

#endif  // FLATBUFFERS_GENERATED_ATTEMPTHISTORY_GD_ATT_HISTORY_FBS_H_
